#ifndef IPL_H_
#define IPL_H_

#include "iris_engine_v3.h"

#ifdef __cplusplus 
extern "C" {
#endif

extern ire3_settings iris_settings;

//iplLibInit
//	@FullFrameWidth - Width of Full Frame - Normally its 1280.
//	@FullFrameHeight - Height of Full Frame - Normally its 720.
int iplLibInit(int FullFrameWidth, int FullFrameHeight);

//IplInit
//	This Function is used to Initialize IPL Library. It will generate global array of height * Width.
//	@VendorID - Vendor ID is USB Device VID
//	@ProductID - Product ID is USB Device PID
//	@LicenseKey - License Key generated by License Manager
//	@LicenseKeyLength - Length of LicenseKey
int iplDeviceInit(int VendorID, int ProductID, unsigned char * LicenseKey, int LicenseKeyLength);

//IplUninit
//	This Function is used to Uninitialize IPL Library.
int iplLibUninit();

//IplGetLibraryVersion
//	This Function is used to Get Lirbary Version of IPL Library.
int iplGetLibraryVersion();
//
//
////iplProcessRawImage
////	This Function will generate Raw Image.
//	//	@rgb_frame - Original Frame Received from Sensor
//	//	@FirstPersArray - First Array
//	//	@SecondPersArray - Second Array
//	//	@Pers_Frame - Perspective Frame Received from Sensor
//	//	@Cropped_Frame - Cropped Frame Generated. This is Temporory Array and it should be deleted once function executed.
//	//					It should be of size CropWidth x CropHeight
//	//	@Final_Frame - Final Frame Generated. It should be of size FinalFrameWidth x FinalFrameHeight
//	//	@Back_Frame - Background Frame Generated. This is Temporory Array and it should be deleted once function executed.
//	//					It should be of size FullFrameWidth x FullFrameHeight
//	//	@FullFrameWidth - Width of Full Frame - Normally its 1280.
//	//	@FullFrameHeight - Height of Full Frame - Normally its 720.
//	//	@CropWidth - Width of Cropped Frame
//	//	@CropHeight - Height of Cropped Frame
//	//	@CropXCoordinate - X Coordinate of Cropped Frame
//	//	@CropYCoordinate - Y Coordinate of Cropped Frame
//	//	@FinalFrameWidth - Width of Final Frame
//	//	@FinalFrameHeight - Height of Final Frame
//	//	@TopPers - Top Pers
//	//	@BottomPers - Bottom Pers
//	//	@Invert - Invert Image is needed
//	//	@PersAverage - Pers Average to be done or not. Normally for preview mode its not required. but for final image its must
//	//	@Vignette_Enabled - Vignette has to be done or not. Pass 1 for yes and 0 for No. If yes then Background Frame is needed.
//	//	@Vignette_Top - Top Vignette value of 255
//	//	@Vignette_Bottom - Bottom Vignette value of 0
//	//	@RotateFinalImage - Final Image to be roteted or not


int iplProcessRawImage(unsigned char* rgb_frame, unsigned char* Final_Frame, int FullFrameWidth, int FullFrameHeight,
					   int CropWidth, int CropHeight, int CropXCoordinate, int CropYCoordinate, int FinalFrameWidth, int FinalFrameHeight,
					   int Invert, int RotateFinalImage);

int iplReadMIS100V2EEPROM(int VendorID,int ProductID,unsigned char* serialno,int *FULL_FRAME_WIDTH,int *FULL_FRAME_HEIGHT,
						  int *FINAL_FRAME_WIDTH, int *FINAL_FRAME_HEIGHT,  int *CROP_WIDTH,  int *CROP_HEIGHT, int *CROP_X_COORDINATE, int *CROP_Y_COORDINATE, int *DPI, unsigned char* Firmware_Version);

typedef struct _FPC_IRIS_EYE_INFO {
	int iris_center_x;
	int iris_center_y;
	int iris_diameter;
	int pupil_center_x;
	int pupil_center_y;
	int pupil_diameter;
	int percent_occlusion;
	int sharpness;
	int pupil_blur;
	int pupil_mean;
	int iris_mean;
	int iris_quality;
} FPC_IRIS_EYE_INFO;



int iplIRISGetEyeInfo(unsigned char* image, int width, int height, int DPI, int angular_tolerance, int resizeindex, FPC_IRIS_EYE_INFO& out_eye_info);

//Fileio
//int iplReadBitmap(unsigned char* frame, char* filein, int height, int width, int flipped);
int iplConvertRawToBmp(unsigned char* frame, unsigned char* Imagedata, int ht, int wd, int flipped);
//int iplWriteBitmap(unsigned char* frame, char* fileout, int Height, int Width, int flipped);
int iplReadImage(unsigned char* frame, char* filein, int Height, int Width, int flipcode);
int iplWriteImage(unsigned char* frame, char* fileout, int Height, int Width, int flipcode);


#define MPD_E_SUCCESS 0
#define MPD_E_NO_DEVICE -1601
#define MPD_E_MEMORY	-1602
#define MPD_E_BAD_USB_LICENSE	-1603
#define MPD_E_OTHER			-1604
#define MPD_E_INVALIDPARAM	-1605
#define MPD_VID_NOTMATCH	-1606
#define MPD_PID_NOTMATCH	-1607
#define MPD_CID_NOTMATCH	-1608
#define MPD_E_NOSERIAL		-1609
#define MPD_E_NOTINITIALIZED -1610
#define MPD_E_NO_FILE		-1611
#define MPD_E_NOT_IMPLEMENTED	-1612
#define MPD_E_CORRUPT_SERIAL    -1613
#define MPD_E_BAD_MATCH_LICENSE	-1614
#define MPD_E_BAD_MODEL_LICENSE	-1615
#define MPD_E_BAD_LICENSE -1616
#define MPD_E_FAIL			-1617

#define MPD_E_FPCIRIS_SUCCESS  0
#define MPD_E_FPCIRIS_EXCEPTION  -1
#define MPD_E_FPCIRIS_INVALID_PARAM  -2
#define MPD_E_FPCIRIS_FEATURES_NOT_FOUND  -3
#define MPD_E_FPCIRIS_NOT_EXTRACT_IMG  -4
#define MPD_E_FPCIRIS_FEATURES_NOT_DESERIALIZE  -5
#define MPD_E_FPCIRIS_FEATURES_NOT_EXTRACT  -6
#define MPD_E_FPCIRIS_OTHER  -7

#ifdef __cplusplus 
}
#endif 

#endif /* IPL_H_ */